/* 
 * Indra Identity API : v3
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using dastan.Client;
using dastan.Model;

namespace dastan.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountApiV3ApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <returns>ApplicationUser</returns>
        ApplicationUser ApiVversionAccountByUsernameGet (string username);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <returns>ApiResponse of ApplicationUser</returns>
        ApiResponse<ApplicationUser> ApiVversionAccountByUsernameGetWithHttpInfo (string username);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>SendCodeResponse</returns>
        SendCodeResponse ForgetPasswordSendCode (SendCodeRequest dto = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>ApiResponse of SendCodeResponse</returns>
        ApiResponse<SendCodeResponse> ForgetPasswordSendCodeWithHttpInfo (SendCodeRequest dto = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>string</returns>
        string ForgetPasswordValidateCode (ValidateCodeRequest request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ForgetPasswordValidateCodeWithHttpInfo (ValidateCodeRequest request = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>SendCodeResponse</returns>
        SendCodeResponse HostSendCode (SendCodeRequest dto = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>ApiResponse of SendCodeResponse</returns>
        ApiResponse<SendCodeResponse> HostSendCodeWithHttpInfo (SendCodeRequest dto = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>SendCodeResponse</returns>
        SendCodeResponse HostSignUp (RegisterDto model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of SendCodeResponse</returns>
        ApiResponse<SendCodeResponse> HostSignUpWithHttpInfo (RegisterDto model = null);
        /// <summary>
        /// نسخه سوم دریافت توکن دسترسی، که علاوه بر ایمیل با شماره تلفن هم کار می‌کند
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>TokenResult</returns>
        TokenResult Login (LoginRequest dto = null);

        /// <summary>
        /// نسخه سوم دریافت توکن دسترسی، که علاوه بر ایمیل با شماره تلفن هم کار می‌کند
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>ApiResponse of TokenResult</returns>
        ApiResponse<TokenResult> LoginWithHttpInfo (LoginRequest dto = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>string</returns>
        string RegisterValidateCode (ValidateCodeRequest request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> RegisterValidateCodeWithHttpInfo (ValidateCodeRequest request = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>SendCodeResponse</returns>
        SendCodeResponse SendCode (SendCodeRequest dto = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>ApiResponse of SendCodeResponse</returns>
        ApiResponse<SendCodeResponse> SendCodeWithHttpInfo (SendCodeRequest dto = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>TokenResult</returns>
        TokenResult SetPassword (ResetPasswordRequest dto = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>ApiResponse of TokenResult</returns>
        ApiResponse<TokenResult> SetPasswordWithHttpInfo (ResetPasswordRequest dto = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>TokenResult</returns>
        TokenResult SetPassword_0 (ResetPasswordRequest dto = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>ApiResponse of TokenResult</returns>
        ApiResponse<TokenResult> SetPassword_0WithHttpInfo (ResetPasswordRequest dto = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>SendCodeResponse</returns>
        SendCodeResponse SignUp (RegisterDto model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of SendCodeResponse</returns>
        ApiResponse<SendCodeResponse> SignUpWithHttpInfo (RegisterDto model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>TokenResult</returns>
        TokenResult ValidateCode (ValidateCodeRequest request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of TokenResult</returns>
        ApiResponse<TokenResult> ValidateCodeWithHttpInfo (ValidateCodeRequest request = null);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountApiV3ApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <returns>Task of ApplicationUser</returns>
        System.Threading.Tasks.Task<ApplicationUser> ApiVversionAccountByUsernameGetAsync (string username);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <returns>Task of ApiResponse (ApplicationUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationUser>> ApiVversionAccountByUsernameGetAsyncWithHttpInfo (string username);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>Task of SendCodeResponse</returns>
        System.Threading.Tasks.Task<SendCodeResponse> ForgetPasswordSendCodeAsync (SendCodeRequest dto = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>Task of ApiResponse (SendCodeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendCodeResponse>> ForgetPasswordSendCodeAsyncWithHttpInfo (SendCodeRequest dto = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ForgetPasswordValidateCodeAsync (ValidateCodeRequest request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ForgetPasswordValidateCodeAsyncWithHttpInfo (ValidateCodeRequest request = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>Task of SendCodeResponse</returns>
        System.Threading.Tasks.Task<SendCodeResponse> HostSendCodeAsync (SendCodeRequest dto = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>Task of ApiResponse (SendCodeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendCodeResponse>> HostSendCodeAsyncWithHttpInfo (SendCodeRequest dto = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of SendCodeResponse</returns>
        System.Threading.Tasks.Task<SendCodeResponse> HostSignUpAsync (RegisterDto model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (SendCodeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendCodeResponse>> HostSignUpAsyncWithHttpInfo (RegisterDto model = null);
        /// <summary>
        /// نسخه سوم دریافت توکن دسترسی، که علاوه بر ایمیل با شماره تلفن هم کار می‌کند
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>Task of TokenResult</returns>
        System.Threading.Tasks.Task<TokenResult> LoginAsync (LoginRequest dto = null);

        /// <summary>
        /// نسخه سوم دریافت توکن دسترسی، که علاوه بر ایمیل با شماره تلفن هم کار می‌کند
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>Task of ApiResponse (TokenResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenResult>> LoginAsyncWithHttpInfo (LoginRequest dto = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> RegisterValidateCodeAsync (ValidateCodeRequest request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> RegisterValidateCodeAsyncWithHttpInfo (ValidateCodeRequest request = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>Task of SendCodeResponse</returns>
        System.Threading.Tasks.Task<SendCodeResponse> SendCodeAsync (SendCodeRequest dto = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>Task of ApiResponse (SendCodeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendCodeResponse>> SendCodeAsyncWithHttpInfo (SendCodeRequest dto = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>Task of TokenResult</returns>
        System.Threading.Tasks.Task<TokenResult> SetPasswordAsync (ResetPasswordRequest dto = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>Task of ApiResponse (TokenResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenResult>> SetPasswordAsyncWithHttpInfo (ResetPasswordRequest dto = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>Task of TokenResult</returns>
        System.Threading.Tasks.Task<TokenResult> SetPassword_0Async (ResetPasswordRequest dto = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>Task of ApiResponse (TokenResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenResult>> SetPassword_0AsyncWithHttpInfo (ResetPasswordRequest dto = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of SendCodeResponse</returns>
        System.Threading.Tasks.Task<SendCodeResponse> SignUpAsync (RegisterDto model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (SendCodeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendCodeResponse>> SignUpAsyncWithHttpInfo (RegisterDto model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of TokenResult</returns>
        System.Threading.Tasks.Task<TokenResult> ValidateCodeAsync (ValidateCodeRequest request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (TokenResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenResult>> ValidateCodeAsyncWithHttpInfo (ValidateCodeRequest request = null);
        #endregion Asynchronous Operations
    }

    public interface IAccountApiV3Api : IAccountApiV3ApiSync, IAccountApiV3ApiAsync
    {
        
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AccountApiV3Api : IAccountApiV3Api
    {
        private dastan.Client.ExceptionFactory _exceptionFactory = (name, response) => null;
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApiV3Api"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountApiV3Api() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApiV3Api"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountApiV3Api(String basePath)
        {
            this.Configuration = dastan.Client.Configuration.MergeConfigurations(
                dastan.Client.GlobalConfiguration.Instance,
                new dastan.Client.Configuration { BasePath = basePath }
            );
            this.Client = new dastan.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new dastan.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = dastan.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApiV3Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccountApiV3Api(dastan.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = dastan.Client.Configuration.MergeConfigurations(
                dastan.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new dastan.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new dastan.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = dastan.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AccountApiV3Api(dastan.Client.ISynchronousClient client,dastan.Client.IAsynchronousClient asyncClient, IO.Swagger.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");
            
            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = dastan.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public dastan.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public dastan.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public dastan.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public dastan.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <returns>ApplicationUser</returns>
        public ApplicationUser ApiVversionAccountByUsernameGet (string username)
        {
             dastan.Client.ApiResponse<ApplicationUser> localVarResponse = ApiVversionAccountByUsernameGetWithHttpInfo(username);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <returns>ApiResponse of ApplicationUser</returns>
        public dastan.Client.ApiResponse< ApplicationUser > ApiVversionAccountByUsernameGetWithHttpInfo (string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new dastan.Client.ApiException(400, "Missing required parameter 'username' when calling AccountApiV3Api->ApiVversionAccountByUsernameGet");

            dastan.Client.RequestOptions requestOptions = new dastan.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain;v=3;v=3",
                "application/json;v=3;v=3",
                "text/json;v=3;v=3"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (username != null)
                requestOptions.PathParameters.Add("username", dastan.Client.ClientUtils.ParameterToString(username)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< ApplicationUser >("/api/v3/account/{username}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiVversionAccountByUsernameGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <returns>Task of ApplicationUser</returns>
        public async System.Threading.Tasks.Task<ApplicationUser> ApiVversionAccountByUsernameGetAsync (string username)
        {
             dastan.Client.ApiResponse<ApplicationUser> localVarResponse = await ApiVversionAccountByUsernameGetAsyncWithHttpInfo(username);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <returns>Task of ApiResponse (ApplicationUser)</returns>
        public async System.Threading.Tasks.Task<dastan.Client.ApiResponse<ApplicationUser>> ApiVversionAccountByUsernameGetAsyncWithHttpInfo (string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new dastan.Client.ApiException(400, "Missing required parameter 'username' when calling AccountApiV3Api->ApiVversionAccountByUsernameGet");

            dastan.Client.RequestOptions requestOptions = new dastan.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain;v=3;v=3",
                "application/json;v=3;v=3",
                "text/json;v=3;v=3"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (username != null)
                requestOptions.PathParameters.Add("username", dastan.Client.ClientUtils.ParameterToString(username)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ApplicationUser>("/api/v3/account/{username}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiVversionAccountByUsernameGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>SendCodeResponse</returns>
        public SendCodeResponse ForgetPasswordSendCode (SendCodeRequest dto = null)
        {
             dastan.Client.ApiResponse<SendCodeResponse> localVarResponse = ForgetPasswordSendCodeWithHttpInfo(dto);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>ApiResponse of SendCodeResponse</returns>
        public dastan.Client.ApiResponse< SendCodeResponse > ForgetPasswordSendCodeWithHttpInfo (SendCodeRequest dto = null)
        {

            dastan.Client.RequestOptions requestOptions = new dastan.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain;v=3;v=3",
                "application/json;v=3;v=3",
                "text/json;v=3;v=3"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = dto;


            // make the HTTP request

            var response = this.Client.Post< SendCodeResponse >("/api/v3/account/forget-password/send-code", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ForgetPasswordSendCode", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>Task of SendCodeResponse</returns>
        public async System.Threading.Tasks.Task<SendCodeResponse> ForgetPasswordSendCodeAsync (SendCodeRequest dto = null)
        {
             dastan.Client.ApiResponse<SendCodeResponse> localVarResponse = await ForgetPasswordSendCodeAsyncWithHttpInfo(dto);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>Task of ApiResponse (SendCodeResponse)</returns>
        public async System.Threading.Tasks.Task<dastan.Client.ApiResponse<SendCodeResponse>> ForgetPasswordSendCodeAsyncWithHttpInfo (SendCodeRequest dto = null)
        {

            dastan.Client.RequestOptions requestOptions = new dastan.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain;v=3;v=3",
                "application/json;v=3;v=3",
                "text/json;v=3;v=3"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = dto;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<SendCodeResponse>("/api/v3/account/forget-password/send-code", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ForgetPasswordSendCode", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>string</returns>
        public string ForgetPasswordValidateCode (ValidateCodeRequest request = null)
        {
             dastan.Client.ApiResponse<string> localVarResponse = ForgetPasswordValidateCodeWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public dastan.Client.ApiResponse< string > ForgetPasswordValidateCodeWithHttpInfo (ValidateCodeRequest request = null)
        {

            dastan.Client.RequestOptions requestOptions = new dastan.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain;v=3;v=3",
                "application/json;v=3;v=3",
                "text/json;v=3;v=3"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = request;


            // make the HTTP request

            var response = this.Client.Post< string >("/api/v3/account/forget-password/validate-code", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ForgetPasswordValidateCode", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ForgetPasswordValidateCodeAsync (ValidateCodeRequest request = null)
        {
             dastan.Client.ApiResponse<string> localVarResponse = await ForgetPasswordValidateCodeAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<dastan.Client.ApiResponse<string>> ForgetPasswordValidateCodeAsyncWithHttpInfo (ValidateCodeRequest request = null)
        {

            dastan.Client.RequestOptions requestOptions = new dastan.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain;v=3;v=3",
                "application/json;v=3;v=3",
                "text/json;v=3;v=3"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = request;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<string>("/api/v3/account/forget-password/validate-code", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ForgetPasswordValidateCode", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>SendCodeResponse</returns>
        public SendCodeResponse HostSendCode (SendCodeRequest dto = null)
        {
             dastan.Client.ApiResponse<SendCodeResponse> localVarResponse = HostSendCodeWithHttpInfo(dto);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>ApiResponse of SendCodeResponse</returns>
        public dastan.Client.ApiResponse< SendCodeResponse > HostSendCodeWithHttpInfo (SendCodeRequest dto = null)
        {

            dastan.Client.RequestOptions requestOptions = new dastan.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain;v=3;v=3",
                "application/json;v=3;v=3",
                "text/json;v=3;v=3"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = dto;


            // make the HTTP request

            var response = this.Client.Post< SendCodeResponse >("/api/v3/account/host-send-code", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("HostSendCode", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>Task of SendCodeResponse</returns>
        public async System.Threading.Tasks.Task<SendCodeResponse> HostSendCodeAsync (SendCodeRequest dto = null)
        {
             dastan.Client.ApiResponse<SendCodeResponse> localVarResponse = await HostSendCodeAsyncWithHttpInfo(dto);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>Task of ApiResponse (SendCodeResponse)</returns>
        public async System.Threading.Tasks.Task<dastan.Client.ApiResponse<SendCodeResponse>> HostSendCodeAsyncWithHttpInfo (SendCodeRequest dto = null)
        {

            dastan.Client.RequestOptions requestOptions = new dastan.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain;v=3;v=3",
                "application/json;v=3;v=3",
                "text/json;v=3;v=3"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = dto;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<SendCodeResponse>("/api/v3/account/host-send-code", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("HostSendCode", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>SendCodeResponse</returns>
        public SendCodeResponse HostSignUp (RegisterDto model = null)
        {
             dastan.Client.ApiResponse<SendCodeResponse> localVarResponse = HostSignUpWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of SendCodeResponse</returns>
        public dastan.Client.ApiResponse< SendCodeResponse > HostSignUpWithHttpInfo (RegisterDto model = null)
        {

            dastan.Client.RequestOptions requestOptions = new dastan.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain;v=3;v=3",
                "application/json;v=3;v=3",
                "text/json;v=3;v=3"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = model;


            // make the HTTP request

            var response = this.Client.Post< SendCodeResponse >("/api/v3/account/host-sign-up", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("HostSignUp", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of SendCodeResponse</returns>
        public async System.Threading.Tasks.Task<SendCodeResponse> HostSignUpAsync (RegisterDto model = null)
        {
             dastan.Client.ApiResponse<SendCodeResponse> localVarResponse = await HostSignUpAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (SendCodeResponse)</returns>
        public async System.Threading.Tasks.Task<dastan.Client.ApiResponse<SendCodeResponse>> HostSignUpAsyncWithHttpInfo (RegisterDto model = null)
        {

            dastan.Client.RequestOptions requestOptions = new dastan.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain;v=3;v=3",
                "application/json;v=3;v=3",
                "text/json;v=3;v=3"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = model;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<SendCodeResponse>("/api/v3/account/host-sign-up", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("HostSignUp", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// نسخه سوم دریافت توکن دسترسی، که علاوه بر ایمیل با شماره تلفن هم کار می‌کند 
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>TokenResult</returns>
        public TokenResult Login (LoginRequest dto = null)
        {
             dastan.Client.ApiResponse<TokenResult> localVarResponse = LoginWithHttpInfo(dto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// نسخه سوم دریافت توکن دسترسی، که علاوه بر ایمیل با شماره تلفن هم کار می‌کند 
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>ApiResponse of TokenResult</returns>
        public dastan.Client.ApiResponse< TokenResult > LoginWithHttpInfo (LoginRequest dto = null)
        {

            dastan.Client.RequestOptions requestOptions = new dastan.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain;v=3;v=3",
                "application/json;v=3;v=3",
                "text/json;v=3;v=3"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = dto;


            // make the HTTP request

            var response = this.Client.Post< TokenResult >("/api/v3/account/login", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("Login", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// نسخه سوم دریافت توکن دسترسی، که علاوه بر ایمیل با شماره تلفن هم کار می‌کند 
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>Task of TokenResult</returns>
        public async System.Threading.Tasks.Task<TokenResult> LoginAsync (LoginRequest dto = null)
        {
             dastan.Client.ApiResponse<TokenResult> localVarResponse = await LoginAsyncWithHttpInfo(dto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// نسخه سوم دریافت توکن دسترسی، که علاوه بر ایمیل با شماره تلفن هم کار می‌کند 
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>Task of ApiResponse (TokenResult)</returns>
        public async System.Threading.Tasks.Task<dastan.Client.ApiResponse<TokenResult>> LoginAsyncWithHttpInfo (LoginRequest dto = null)
        {

            dastan.Client.RequestOptions requestOptions = new dastan.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain;v=3;v=3",
                "application/json;v=3;v=3",
                "text/json;v=3;v=3"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = dto;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<TokenResult>("/api/v3/account/login", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("Login", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>string</returns>
        public string RegisterValidateCode (ValidateCodeRequest request = null)
        {
             dastan.Client.ApiResponse<string> localVarResponse = RegisterValidateCodeWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public dastan.Client.ApiResponse< string > RegisterValidateCodeWithHttpInfo (ValidateCodeRequest request = null)
        {

            dastan.Client.RequestOptions requestOptions = new dastan.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain;v=3;v=3",
                "application/json;v=3;v=3",
                "text/json;v=3;v=3"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = request;


            // make the HTTP request

            var response = this.Client.Post< string >("/api/v3/account/register/validate-code", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("RegisterValidateCode", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> RegisterValidateCodeAsync (ValidateCodeRequest request = null)
        {
             dastan.Client.ApiResponse<string> localVarResponse = await RegisterValidateCodeAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<dastan.Client.ApiResponse<string>> RegisterValidateCodeAsyncWithHttpInfo (ValidateCodeRequest request = null)
        {

            dastan.Client.RequestOptions requestOptions = new dastan.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain;v=3;v=3",
                "application/json;v=3;v=3",
                "text/json;v=3;v=3"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = request;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<string>("/api/v3/account/register/validate-code", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("RegisterValidateCode", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>SendCodeResponse</returns>
        public SendCodeResponse SendCode (SendCodeRequest dto = null)
        {
             dastan.Client.ApiResponse<SendCodeResponse> localVarResponse = SendCodeWithHttpInfo(dto);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>ApiResponse of SendCodeResponse</returns>
        public dastan.Client.ApiResponse< SendCodeResponse > SendCodeWithHttpInfo (SendCodeRequest dto = null)
        {

            dastan.Client.RequestOptions requestOptions = new dastan.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain;v=3;v=3",
                "application/json;v=3;v=3",
                "text/json;v=3;v=3"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = dto;


            // make the HTTP request

            var response = this.Client.Post< SendCodeResponse >("/api/v3/account/send-code", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SendCode", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>Task of SendCodeResponse</returns>
        public async System.Threading.Tasks.Task<SendCodeResponse> SendCodeAsync (SendCodeRequest dto = null)
        {
             dastan.Client.ApiResponse<SendCodeResponse> localVarResponse = await SendCodeAsyncWithHttpInfo(dto);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>Task of ApiResponse (SendCodeResponse)</returns>
        public async System.Threading.Tasks.Task<dastan.Client.ApiResponse<SendCodeResponse>> SendCodeAsyncWithHttpInfo (SendCodeRequest dto = null)
        {

            dastan.Client.RequestOptions requestOptions = new dastan.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain;v=3;v=3",
                "application/json;v=3;v=3",
                "text/json;v=3;v=3"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = dto;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<SendCodeResponse>("/api/v3/account/send-code", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SendCode", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>TokenResult</returns>
        public TokenResult SetPassword (ResetPasswordRequest dto = null)
        {
             dastan.Client.ApiResponse<TokenResult> localVarResponse = SetPasswordWithHttpInfo(dto);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>ApiResponse of TokenResult</returns>
        public dastan.Client.ApiResponse< TokenResult > SetPasswordWithHttpInfo (ResetPasswordRequest dto = null)
        {

            dastan.Client.RequestOptions requestOptions = new dastan.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain;v=3;v=3",
                "application/json;v=3;v=3",
                "text/json;v=3;v=3"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = dto;


            // make the HTTP request

            var response = this.Client.Post< TokenResult >("/api/v3/account/register/set-password", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SetPassword", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>Task of TokenResult</returns>
        public async System.Threading.Tasks.Task<TokenResult> SetPasswordAsync (ResetPasswordRequest dto = null)
        {
             dastan.Client.ApiResponse<TokenResult> localVarResponse = await SetPasswordAsyncWithHttpInfo(dto);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>Task of ApiResponse (TokenResult)</returns>
        public async System.Threading.Tasks.Task<dastan.Client.ApiResponse<TokenResult>> SetPasswordAsyncWithHttpInfo (ResetPasswordRequest dto = null)
        {

            dastan.Client.RequestOptions requestOptions = new dastan.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain;v=3;v=3",
                "application/json;v=3;v=3",
                "text/json;v=3;v=3"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = dto;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<TokenResult>("/api/v3/account/register/set-password", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SetPassword", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>TokenResult</returns>
        public TokenResult SetPassword_0 (ResetPasswordRequest dto = null)
        {
             dastan.Client.ApiResponse<TokenResult> localVarResponse = SetPassword_0WithHttpInfo(dto);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>ApiResponse of TokenResult</returns>
        public dastan.Client.ApiResponse< TokenResult > SetPassword_0WithHttpInfo (ResetPasswordRequest dto = null)
        {

            dastan.Client.RequestOptions requestOptions = new dastan.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain;v=3;v=3",
                "application/json;v=3;v=3",
                "text/json;v=3;v=3"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = dto;


            // make the HTTP request

            var response = this.Client.Post< TokenResult >("/api/v3/account/forget-password/set-password", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SetPassword_0", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>Task of TokenResult</returns>
        public async System.Threading.Tasks.Task<TokenResult> SetPassword_0Async (ResetPasswordRequest dto = null)
        {
             dastan.Client.ApiResponse<TokenResult> localVarResponse = await SetPassword_0AsyncWithHttpInfo(dto);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto"> (optional)</param>
        /// <returns>Task of ApiResponse (TokenResult)</returns>
        public async System.Threading.Tasks.Task<dastan.Client.ApiResponse<TokenResult>> SetPassword_0AsyncWithHttpInfo (ResetPasswordRequest dto = null)
        {

            dastan.Client.RequestOptions requestOptions = new dastan.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain;v=3;v=3",
                "application/json;v=3;v=3",
                "text/json;v=3;v=3"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = dto;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<TokenResult>("/api/v3/account/forget-password/set-password", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SetPassword_0", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>SendCodeResponse</returns>
        public SendCodeResponse SignUp (RegisterDto model = null)
        {
             dastan.Client.ApiResponse<SendCodeResponse> localVarResponse = SignUpWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of SendCodeResponse</returns>
        public dastan.Client.ApiResponse< SendCodeResponse > SignUpWithHttpInfo (RegisterDto model = null)
        {

            dastan.Client.RequestOptions requestOptions = new dastan.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain;v=3;v=3",
                "application/json;v=3;v=3",
                "text/json;v=3;v=3"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = model;


            // make the HTTP request

            var response = this.Client.Post< SendCodeResponse >("/api/v3/account/sign-up", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SignUp", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of SendCodeResponse</returns>
        public async System.Threading.Tasks.Task<SendCodeResponse> SignUpAsync (RegisterDto model = null)
        {
             dastan.Client.ApiResponse<SendCodeResponse> localVarResponse = await SignUpAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (SendCodeResponse)</returns>
        public async System.Threading.Tasks.Task<dastan.Client.ApiResponse<SendCodeResponse>> SignUpAsyncWithHttpInfo (RegisterDto model = null)
        {

            dastan.Client.RequestOptions requestOptions = new dastan.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain;v=3;v=3",
                "application/json;v=3;v=3",
                "text/json;v=3;v=3"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = model;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<SendCodeResponse>("/api/v3/account/sign-up", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SignUp", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>TokenResult</returns>
        public TokenResult ValidateCode (ValidateCodeRequest request = null)
        {
             dastan.Client.ApiResponse<TokenResult> localVarResponse = ValidateCodeWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of TokenResult</returns>
        public dastan.Client.ApiResponse< TokenResult > ValidateCodeWithHttpInfo (ValidateCodeRequest request = null)
        {

            dastan.Client.RequestOptions requestOptions = new dastan.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain;v=3;v=3",
                "application/json;v=3;v=3",
                "text/json;v=3;v=3"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = request;


            // make the HTTP request

            var response = this.Client.Post< TokenResult >("/api/v3/account/validate-code", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ValidateCode", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of TokenResult</returns>
        public async System.Threading.Tasks.Task<TokenResult> ValidateCodeAsync (ValidateCodeRequest request = null)
        {
             dastan.Client.ApiResponse<TokenResult> localVarResponse = await ValidateCodeAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dastan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (TokenResult)</returns>
        public async System.Threading.Tasks.Task<dastan.Client.ApiResponse<TokenResult>> ValidateCodeAsyncWithHttpInfo (ValidateCodeRequest request = null)
        {

            dastan.Client.RequestOptions requestOptions = new dastan.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain;v=3;v=3",
                "application/json;v=3;v=3",
                "text/json;v=3;v=3"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = request;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<TokenResult>("/api/v3/account/validate-code", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ValidateCode", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
